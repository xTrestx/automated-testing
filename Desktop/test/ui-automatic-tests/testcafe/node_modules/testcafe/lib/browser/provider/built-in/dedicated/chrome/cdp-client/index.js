"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BrowserClient = exports.NEW_WINDOW_OPENED_IN_NATIVE_AUTOMATION = void 0;
const path_1 = __importDefault(require("path"));
const os_1 = __importDefault(require("os"));
const chrome_remote_interface_1 = __importDefault(require("chrome-remote-interface"));
const debug_1 = __importDefault(require("debug"));
const client_functions_1 = require("../../../../utils/client-functions");
const warning_message_1 = __importDefault(require("../../../../../../notifications/warning-message"));
const pretty_hrtime_1 = __importDefault(require("pretty-hrtime"));
const elapsed_upperbounds_1 = require("../elapsed-upperbounds");
const guard_time_execution_1 = __importDefault(require("../../../../../../utils/guard-time-execution"));
const delay_1 = __importDefault(require("../../../../../../utils/delay"));
const native_automation_1 = require("../../../../../../native-automation");
const utils_1 = require("./utils");
const DEBUG_SCOPE = (id) => `testcafe:browser:provider:built-in:chrome:browser-client:${id}`;
const DOWNLOADS_DIR = path_1.default.join(os_1.default.homedir(), 'Downloads');
const debugLog = (0, debug_1.default)('testcafe:browser:provider:built-in:dedicated:chrome');
class ProtocolApiInfo {
    constructor(client) {
        this.client = client;
        this.inactive = false;
    }
}
const SCREENCAST_OPTIONS = {
    format: 'jpeg',
    everyNthFrame: 1,
};
exports.NEW_WINDOW_OPENED_IN_NATIVE_AUTOMATION = 'new-window-opened-in-native-automation';
class BrowserClient {
    constructor(runtimeInfo) {
        this._clients = {};
        this._screencastFrameListenerAttached = false;
        this._runtimeInfo = runtimeInfo;
        this.debugLogger = (0, debug_1.default)(DEBUG_SCOPE(runtimeInfo.browserId));
        runtimeInfo.browserClient = this;
        this._videoFramesBuffer = [];
        this._lastFrame = null;
    }
    get _port() {
        return this._runtimeInfo.cdpPort;
    }
    get _clientKey() {
        return this._runtimeInfo.activeWindowId || this._runtimeInfo.browserId;
    }
    get _config() {
        return this._runtimeInfo.config;
    }
    _checkDropOfPerformance(method, elapsedTime) {
        this.debugLogger(`CDP method '${method}' took ${(0, pretty_hrtime_1.default)(elapsedTime)}`);
        const [elapsedSeconds] = elapsedTime;
        if (elapsedSeconds > elapsed_upperbounds_1.ELAPSED_TIME_UPPERBOUNDS[method]) {
            this._runtimeInfo.providerMethods.reportWarning(warning_message_1.default.browserProviderDropOfPerformance, this._runtimeInfo.browserName);
        }
    }
    async _createClient(target, cacheKey = this._clientKey) {
        const client = await (0, chrome_remote_interface_1.default)({ target, port: this._port });
        const { Page, Network, Runtime } = client;
        this._clients[cacheKey] = new ProtocolApiInfo(client);
        await (0, guard_time_execution_1.default)(async () => await Page.enable(), elapsedTime => this._checkDropOfPerformance(elapsed_upperbounds_1.CheckedCDPMethod.PageEnable, elapsedTime));
        await Network.enable({});
        await Runtime.enable();
        return client;
    }
    async _setupClient(client) {
        if (this._config.emulation)
            await this._setEmulation(client);
        if (this._config.headless)
            await this._setupDownloads(client);
    }
    async _setDeviceMetricsOverride(client, width, height, deviceScaleFactor, mobile) {
        await (0, guard_time_execution_1.default)(async () => {
            await client.Emulation.setDeviceMetricsOverride({
                width,
                height,
                deviceScaleFactor,
                mobile,
                // @ts-ignore
                fitWindow: false,
            });
        }, elapsedTime => this._checkDropOfPerformance(elapsed_upperbounds_1.CheckedCDPMethod.SetDeviceMetricsOverride, elapsedTime));
    }
    async _setUserAgentEmulation(client) {
        if (this._config.userAgent === void 0)
            return;
        await client.Network.setUserAgentOverride({ userAgent: this._config.userAgent });
    }
    async _setTouchEmulation(client) {
        if (this._config.touch === void 0)
            return;
        const touchConfig = {
            enabled: this._config.touch,
            configuration: this._config.mobile ? 'mobile' : 'desktop',
            maxTouchPoints: 1,
        };
        if (client.Emulation.setEmitTouchEventsForMouse)
            await client.Emulation.setEmitTouchEventsForMouse(touchConfig);
        if (client.Emulation.setTouchEmulationEnabled)
            await client.Emulation.setTouchEmulationEnabled(touchConfig);
    }
    async _setEmulation(client) {
        await this._setUserAgentEmulation(client);
        await this._setTouchEmulation(client);
        await this.resizeWindow({
            width: this._config.width,
            height: this._config.height,
        });
    }
    async _setupDownloads(client) {
        await client.Page.setDownloadBehavior({
            behavior: 'allow',
            downloadPath: DOWNLOADS_DIR,
        });
    }
    async _evaluateRuntime(client, expression, returnByValue = false) {
        return client.Runtime.evaluate({ expression, returnByValue });
    }
    async _calculateEmulatedDevicePixelRatio(client) {
        if (!client)
            return;
        const devicePixelRatioQueryResult = await client.Runtime.evaluate({ expression: 'window.devicePixelRatio' });
        this._runtimeInfo.originalDevicePixelRatio = devicePixelRatioQueryResult.result.value;
        this._runtimeInfo.emulatedDevicePixelRatio = this._config.scaleFactor || this._runtimeInfo.originalDevicePixelRatio;
    }
    async resizeWindow(newDimensions) {
        const { browserId, config, viewportSize, providerMethods, emulatedDevicePixelRatio } = this._runtimeInfo;
        const currentWidth = viewportSize.width;
        const currentHeight = viewportSize.height;
        const newWidth = newDimensions.width || currentWidth;
        const newHeight = newDimensions.height || currentHeight;
        if (!config.headless)
            await providerMethods.resizeLocalBrowserWindow(browserId, newWidth, newHeight, currentWidth, currentHeight);
        viewportSize.width = newWidth;
        viewportSize.height = newHeight;
        const client = await this.getActiveClient();
        if (client && config.emulation) {
            await this._setDeviceMetricsOverride(client, viewportSize.width, viewportSize.height, emulatedDevicePixelRatio, config.mobile);
            await (0, guard_time_execution_1.default)(async () => {
                await client.Emulation.setVisibleSize({ width: viewportSize.width, height: viewportSize.height });
            }, elapsedTime => this._checkDropOfPerformance(elapsed_upperbounds_1.CheckedCDPMethod.SetVisibleSize, elapsedTime));
        }
    }
    async maximizeWindowNativeAutomation() {
        const target = await (0, utils_1.getFirstTab)(this._port);
        const client = await this.getActiveClient();
        if (client) {
            const windowParams = await client.Browser.getWindowForTarget({ targetId: target.id });
            await client.Browser.setWindowBounds({ windowId: windowParams.windowId, bounds: { windowState: 'maximized' } });
        }
    }
    async resizeBounds(newDimensions) {
        const { viewportSize } = this._runtimeInfo;
        let nonClientWidth = 0;
        let nonClientHeight = 0;
        if (viewportSize.outerWidth && viewportSize.outerHeight) {
            nonClientWidth = viewportSize.outerWidth - viewportSize.width;
            nonClientHeight = viewportSize.outerHeight - viewportSize.height;
        }
        const target = await (0, utils_1.getFirstTab)(this._port);
        const client = await this.getActiveClient();
        if (client) {
            const windowParams = await client.Browser.getWindowForTarget({ targetId: target.id });
            if (windowParams.bounds.windowState !== 'normal') {
                await client.Browser.setWindowBounds({
                    windowId: windowParams.windowId,
                    bounds: {
                        windowState: 'normal',
                    },
                });
            }
            await client.Browser.setWindowBounds({
                windowId: windowParams.windowId,
                bounds: {
                    width: newDimensions.width + nonClientWidth,
                    height: newDimensions.height + nonClientHeight,
                },
            });
        }
    }
    isHeadlessTab() {
        return !!this._parentTarget && this._config.headless;
    }
    async setClientInactive(windowId) {
        const client = this._clients[windowId];
        if (client)
            client.inactive = true;
    }
    async getActiveClient() {
        try {
            if (!this._clients[this._clientKey]) {
                const target = await (0, utils_1.getActiveTab)(this._port, this._runtimeInfo.activeWindowId);
                await this._createClient(target);
            }
        }
        catch (err) {
            debugLog(err);
            return void 0;
        }
        const info = this._clients[this._clientKey];
        if (info.inactive)
            return void 0;
        return info.client;
    }
    async initMainWindowCdpClient() {
        try {
            const tabs = await (0, utils_1.getTabs)(this._port);
            this._parentTarget = tabs.find(t => t.url.includes(this._runtimeInfo.browserId));
            if (!this._parentTarget)
                return;
            const client = await this.getActiveClient();
            if (client) {
                await this._calculateEmulatedDevicePixelRatio(client);
                await this._setupClient(client);
            }
        }
        catch (e) {
            return;
        }
    }
    async getScreenshotData(fullPage) {
        let clip = void 0;
        const client = await this.getActiveClient();
        if (!client) {
            // NOTE: required for https://github.com/DevExpress/testcafe/issues/6037
            await (0, delay_1.default)(0);
            return Buffer.alloc(0);
        }
        if (fullPage) {
            const metrics = await client.Page.getLayoutMetrics();
            const { width, height } = metrics.cssContentSize || metrics.contentSize;
            clip = { x: 0, y: 0, width, height, scale: 1 };
        }
        const result = await client.Page.captureScreenshot({
            clip,
            captureBeyondViewport: fullPage,
        });
        return Buffer.from(result.data, 'base64');
    }
    async closeTab() {
        if (this._parentTarget)
            await chrome_remote_interface_1.default.Close({ id: this._parentTarget.id, port: this._port });
    }
    async updateMobileViewportSize() {
        const client = await this.getActiveClient();
        if (!client)
            return;
        const windowDimensionsQueryResult = await this._evaluateRuntime(client, `(${client_functions_1.GET_WINDOW_DIMENSIONS_INFO_SCRIPT})()`, true);
        const windowDimensions = windowDimensionsQueryResult.result.value;
        this._runtimeInfo.viewportSize.width = windowDimensions.outerWidth;
        this._runtimeInfo.viewportSize.height = windowDimensions.outerHeight;
    }
    async closeBrowserChildWindow(windowId) {
        await this.setClientInactive(windowId);
        // NOTE: delay browser window closing
        await (0, delay_1.default)(100);
    }
    async startCapturingVideo() {
        const client = await this.getActiveClient();
        if (!client)
            return;
        if (!this._screencastFrameListenerAttached) {
            client.Page.on('screencastFrame', (event) => {
                this._videoFramesBuffer.push({
                    data: event.data,
                    sessionId: event.sessionId,
                });
            });
            this._screencastFrameListenerAttached = true;
        }
        await client.Page.startScreencast(SCREENCAST_OPTIONS);
    }
    async stopCapturingVideo() {
        const client = await this.getActiveClient();
        if (!client)
            return;
        await client.Page.stopScreencast();
        this._lastFrame = null;
        this._videoFramesBuffer = [];
    }
    async getVideoFrameData() {
        const firstFrameFromBuffer = this._videoFramesBuffer.shift();
        const currentVideoFrame = firstFrameFromBuffer || this._lastFrame;
        if (!currentVideoFrame)
            return null;
        if (this._videoFramesBuffer.length === 0)
            this._lastFrame = currentVideoFrame;
        const client = await this.getActiveClient();
        if (!client)
            return null;
        if (firstFrameFromBuffer)
            await client.Page.screencastFrameAck({ sessionId: currentVideoFrame.sessionId });
        return Buffer.from(currentVideoFrame.data, 'base64');
    }
    async _onTargetCreatedHandler(targetInfo, options) {
        const target = await (0, utils_1.getTabById)(this._port, targetInfo.targetId);
        if (!target)
            return null;
        try {
            const client = await this._createClient(target, targetInfo.targetId);
            const nativeAutomation = new native_automation_1.NativeAutomationChildWindow(this._runtimeInfo.browserId, target.id, client, options);
            await nativeAutomation.start();
            return target.id;
        }
        catch (err) {
            debugLog(err);
            return null;
        }
    }
    async createMainWindowNativeAutomation(options) {
        const target = await (0, utils_1.getFirstTab)(this._port);
        const client = await this._createClient(target);
        const nativeAutomation = new native_automation_1.NativeAutomationMainWindow(this._runtimeInfo.browserId, target.id, client, options);
        nativeAutomation.on(exports.NEW_WINDOW_OPENED_IN_NATIVE_AUTOMATION, async (targetInfo) => this._onTargetCreatedHandler(targetInfo, options));
        return nativeAutomation;
    }
}
exports.BrowserClient = BrowserClient;
//# sourceMappingURL=data:application/json;base64,