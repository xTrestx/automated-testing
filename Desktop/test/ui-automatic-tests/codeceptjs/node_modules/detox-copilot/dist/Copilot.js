"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Copilot = void 0;
const CopilotError_1 = require("./errors/CopilotError");
const PromptCreator_1 = require("./utils/PromptCreator");
const CodeEvaluator_1 = require("./utils/CodeEvaluator");
const SnapshotManager_1 = require("./utils/SnapshotManager");
const StepPerformer_1 = require("./actions/StepPerformer");
const CacheHandler_1 = require("./utils/CacheHandler");
/**
 * The main Copilot class that provides AI-assisted testing capabilities for a given underlying testing framework.
 * @note Originally, this class is designed to work with Detox, but it can be extended to work with other frameworks.
 */
class Copilot {
    // Singleton instance of Copilot
    static instance;
    promptCreator;
    codeEvaluator;
    snapshotManager;
    previousSteps = [];
    stepPerformer;
    cacheHandler;
    isRunning = false;
    constructor(config) {
        this.promptCreator = new PromptCreator_1.PromptCreator(config.frameworkDriver.apiCatalog);
        this.codeEvaluator = new CodeEvaluator_1.CodeEvaluator();
        this.snapshotManager = new SnapshotManager_1.SnapshotManager(config.frameworkDriver);
        this.cacheHandler = new CacheHandler_1.CacheHandler();
        this.stepPerformer = new StepPerformer_1.StepPerformer(config.frameworkDriver.apiCatalog.context, this.promptCreator, this.codeEvaluator, this.snapshotManager, config.promptHandler, this.cacheHandler);
    }
    static isInitialized() {
        return !!Copilot.instance;
    }
    /**
     * Gets the singleton instance of Copilot.
     * @returns The Copilot instance.
     */
    static getInstance() {
        if (!Copilot.instance) {
            throw new CopilotError_1.CopilotError('Copilot has not been initialized. Please call the `init()` method before using it.');
        }
        return Copilot.instance;
    }
    /**
     * Initializes the Copilot with the provided configuration, must be called before using Copilot.
     * @param config The configuration options for Copilot.
     */
    static init(config) {
        if (Copilot.instance) {
            throw new CopilotError_1.CopilotError('Copilot has already been initialized. Please call the `init()` method only once.');
        }
        Copilot.instance = new Copilot(config);
    }
    /**
     * Performs a test step based on the given prompt.
     * @param step The step describing the operation to perform.
     */
    async performStep(step) {
        if (!this.isRunning) {
            throw new CopilotError_1.CopilotError('Copilot is not running. Please call the `start()` method before performing any steps.');
        }
        const { code, result } = await this.stepPerformer.perform(step, this.previousSteps);
        this.didPerformStep(step, code, result);
        return result;
    }
    /**
     * Starts the Copilot by clearing the previous steps and temporary cache.
     * @note This must be called before starting a new test flow, in order to clean context from previous tests.
     */
    start() {
        if (this.isRunning) {
            throw new CopilotError_1.CopilotError('Copilot was already started. Please call the `end()` method before starting a new test flow.');
        }
        this.isRunning = true;
        this.previousSteps = [];
        this.cacheHandler.clearTemporaryCache();
    }
    /**
     * Ends the Copilot test flow and optionally saves the temporary cache to the main cache.
     * @param isCacheDisabled -  boolean flag indicating whether the temporary cache data should be saved to the main cache.
     */
    end(isCacheDisabled = false) {
        if (!this.isRunning) {
            throw new CopilotError_1.CopilotError('Copilot is not running. Please call the `start()` method before ending the test flow.');
        }
        this.isRunning = false;
        if (!isCacheDisabled)
            this.cacheHandler.flushTemporaryCache();
    }
    didPerformStep(step, code, result) {
        this.previousSteps = [...this.previousSteps, {
                step,
                code,
                result
            }];
    }
}
exports.Copilot = Copilot;
