"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CacheHandler = void 0;
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
class CacheHandler {
    cache = new Map();
    temporaryCache = new Map();
    cacheFilePath;
    constructor(cacheFileName = 'detox_copilot_cache.json') {
        this.cacheFilePath = path_1.default.resolve(process.cwd(), cacheFileName);
    }
    loadCacheFromFile() {
        try {
            if (fs_1.default.existsSync(this.cacheFilePath)) {
                const readFileSync = fs_1.default.readFileSync;
                const data = fs_1.default.readFileSync(this.cacheFilePath, 'utf-8');
                const json = JSON.parse(data);
                this.cache = new Map(Object.entries(json));
            }
            else {
                this.cache.clear(); // Ensure cache is empty if file doesn't exist
            }
        }
        catch (error) {
            console.warn('Error loading cache from file:', error);
            this.cache.clear(); // Clear cache on error to avoid stale data
        }
    }
    saveCacheToFile() {
        try {
            const json = Object.fromEntries(this.cache);
            fs_1.default.writeFileSync(this.cacheFilePath, JSON.stringify(json, null, 2), { flag: 'w+' });
        }
        catch (error) {
            console.error('Error saving cache to file:', error);
        }
    }
    getStepFromCache(key) {
        return this.cache.get(key);
    }
    addToTemporaryCache(key, value) {
        this.temporaryCache.set(key, value);
    }
    flushTemporaryCache() {
        this.temporaryCache.forEach((value, key) => {
            this.cache.set(key, value);
        });
        this.saveCacheToFile();
        this.clearTemporaryCache();
    }
    clearTemporaryCache() {
        this.temporaryCache.clear();
    }
}
exports.CacheHandler = CacheHandler;
