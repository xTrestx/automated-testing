"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CodeEvaluator = void 0;
const CodeEvaluationError_1 = require("../errors/CodeEvaluationError");
class CodeEvaluator {
    async evaluate(code, context) {
        const asyncFunction = this.createAsyncFunction(code, context);
        const result = await asyncFunction();
        return { code, result };
    }
    createAsyncFunction(code, context) {
        // todo: this is a temp log for debugging, we'll need to pass a logging mechanism from the framework.
        console.log("\x1b[90m%s\x1b[0m\x1b[92m%s\x1b[0m", "Copilot evaluating code block:\n", `${code}\n`);
        try {
            const contextValues = Object.values(context);
            // Wrap the code in an immediately-invoked async function expression (IIFE), and inject context variables into the function
            return new Function(...Object.keys(context), `return (async () => { 
              ${code}
            })();`).bind(null, ...contextValues);
        }
        catch (error) {
            const underlyingErrorMessage = error?.message;
            throw new CodeEvaluationError_1.CodeEvaluationError(`Failed to execute test step code, error: ${underlyingErrorMessage}:\n\`\`\`\n${code}\n\`\`\``);
        }
    }
}
exports.CodeEvaluator = CodeEvaluator;
